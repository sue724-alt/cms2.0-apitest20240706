{"name": "下发A10=100", "status": "broken", "statusDetails": {"message": "Exception: 分析YAML文件异常：异常信息: Traceback (most recent call last):\n  File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 368, in validate_result\n    error_log(\"断言失败:\"+assert_key+\"不等于\"+str(assert_value))\n  File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\logger_util.py\", line 66, in error_log\n    raise Exception(log_message)\nException: 断言失败:status_code不等于200\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 248, in analysis_yaml\n    self.validate_result(yq_result, return_data, status_code)\n  File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 448, in validate_result\n    error_log(\"断言异常：异常信息: %s\" % str(traceback.format_exc()))\n  File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\logger_util.py\", line 66, in error_log\n    raise Exception(log_message)\nException: 断言异常：异常信息: Traceback (most recent call last):\n  File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 368, in validate_result\n    error_log(\"断言失败:\"+assert_key+\"不等于\"+str(assert_value))\n  File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\logger_util.py\", line 66, in error_log\n    raise Exception(log_message)\nException: 断言失败:status_code不等于200", "trace": "self = <common.requests_util.RequestUtil object at 0x000002758A277490>\nyq_result = [{'equals': {'status_code': 200}}, {'equals': {'allSuccess': True}}]\nsj_result = {'code': 500, 'exception': {'callStack': [{'assembly': 'System.Private.CoreLib', 'fileName': 'C:\\\\Users\\\\Yorha\\\\SYC\\\\C...of an object.', 'type': 'NullReferenceException', ...}, 'msg': 'Object reference not set to an instance of an object.'}\nstatus_code = 500\n\n    def validate_result(self,yq_result,sj_result,status_code):\n        try:\n            \"\"\"\n            :param yq_result: 预期结果\n            :param sj_result: 实际结果\n            :param status_code: 实际返回的状态码\n            :return:\n            \"\"\"\n            #解析\n            yq_result = self.replace_load(yq_result)\n    \n            yq_result_list = []\n            #断言是否成功的标记：0是成功，其他失败\n            # print('预期结果：',yq_result)\n            # print('实际结果：',sj_result,status_code)\n            flag = 0\n            #解析\n            if yq_result and isinstance(yq_result,list):\n                # print(\"预期结果：\",yq_result)\n                for yq in yq_result:\n                    #断言参数解析\n                    yq = self.replace_load(yq)\n                    for key,value in dict(yq).items():\n                        #等于断言\n                        if key=='equals':\n                            for assert_key,assert_value in dict(value).items():\n                                # print(\"assert_key:\",assert_key,\"assert_value:\",assert_value)\n                                if assert_key==\"status_code\":\n                                    if status_code!=assert_value:\n                                        flag = flag + 1\n>                                       error_log(\"断言失败:\"+assert_key+\"不等于\"+str(assert_value))\n\ncommon\\requests_util.py:368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlog_message = '断言失败:status_code不等于200'\n\n    def error_log(log_message):\n        LoggerUtil().creat_log().info(log_message)\n>       raise Exception(log_message)\nE       Exception: 断言失败:status_code不等于200\n\ncommon\\logger_util.py:66: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <common.requests_util.RequestUtil object at 0x000002758A277490>\ncaseinfo = {'base_url': '${get_base_url(cms_url)}', 'name': '下发A10=100', 'parameters': {'name-value': 'data/HistoryManagement/history_write_cms_io_var3.csv'}, 'request': {'json': {'A10': '100'}}, ...}\n\n        def analysis_yaml(self, caseinfo: object) -> object:\n            # print(\"==========caseinfo:\",caseinfo)\n            try:\n                # 1.必须有的四个一级关键字：name,base_url,request,validate\n                caseinfo_keys = dict(caseinfo).keys()\n                if 'name' in caseinfo_keys and 'base_url' in caseinfo_keys and 'request' in caseinfo_keys and 'validate' in caseinfo_keys:\n                    # 2.在request一级关键字下必须包括两个二级关键字：method，url\n                    request_keys = dict(caseinfo['request']).keys()\n                    if 'method' in request_keys and 'url' in request_keys:\n                        # 参数(param,data,json)，请求头，文件上传这些都不能约束\n                        self.base_url = caseinfo['base_url']\n                        name = caseinfo['name']\n                        method = caseinfo['request'].pop('method')\n                        # url = caseinfo['request']['url']\n                        url = caseinfo['request'].pop('url')\n                        headers = None\n                        if jsonpath.jsonpath(caseinfo, '$..headers'):\n                            headers = caseinfo['request']['headers']\n                            del caseinfo['request']['headers']\n    \n                        files = None\n                        if jsonpath.jsonpath(caseinfo, '$..files'):\n                            files = caseinfo['request']['files']\n                            for key,value in dict(files).items():\n                                files_value = self.replace_load(value)\n                                files[key] = open(files_value,'rb')\n                            del caseinfo['request']['files']\n                        res = self.send_request(name =name,method=method,\n                                                url=url,\n                                                headers=headers, files=files,\n                                                **caseinfo['request'])\n    \n    # '----------------------------------------------------------------------------'\n                        status_code = res.status_code\n                        try:\n                            return_data = res.json()  # json提取\n                            return_text = json.dumps(return_data)\n                        except:\n                            self.res_fomat = 1\n    \n                        # 接口关联的变量,既支持正则表达式，也支持json提取\n                        if self.res_fomat == 0:\n                            return_data = res.json()  # json提取\n                            return_text = json.dumps(return_data)\n                            if 'extract' in caseinfo:\n                                for key, value in dict(caseinfo['extract']).items():\n                                    # 正则表达式\n                                    if '(.+?)' in value or '(.*?)' in value:\n                                        ze_value = re.findall(value, return_text)\n                                        if ze_value:\n                                            extract_data = {key: ze_value[1]}\n                                            write_extract_file(extract_data)\n    \n                                    elif value == \"content\":\n                                        if isinstance(return_data,list):\n                                            extract_data = {key: return_data[0]}\n                                            write_extract_file(extract_data)\n                                        elif isinstance(return_data,dict):\n                                            extract_data = {key: return_data}\n                                            write_extract_file(extract_data)\n                                        else:\n                                            extract_data = {key: return_data}\n                                            write_extract_file(extract_data)\n                                    # json、list提取\n                                    else:\n                                        if isinstance(return_data, list):\n                                            value_data = str(value).split('.')\n                                            key_data = value_data[0]\n                                            value_data = int(value_data[1])\n                                            extract_data = {key: return_data[value_data][key_data]}\n                                            write_extract_file(extract_data)\n                                        elif isinstance(return_data, dict):\n                                            if \".\"  in str(value):\n                                                # 仅针对key加索引类型,如：originalId.0\n                                                key_list = str(value).split('.')\n                                                value1 = key_list[0]\n                                                value2 = int(key_list[1])\n                                                value_list = jsonpath.jsonpath(return_data, '$..%s' % value1)\n                                                extract_data = {key: value_list[value2]}\n                                                write_extract_file(extract_data)\n                                            else:\n                                                value_data = jsonpath.jsonpath(return_data, '$..%s' % value)\n                                                # print(\"++++++++++++:\",value_data)\n                                                extract_data = {key: value_data[0]}\n                                                write_extract_file(extract_data)\n    \n    \n                            # 断言封装\n                            yq_result = caseinfo['validate']\n                            # print(\"实际结果：\",return_data)\n>                           self.validate_result(yq_result, return_data, status_code)\n\ncommon\\requests_util.py:248: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\requests_util.py:448: in validate_result\n    error_log(\"断言异常：异常信息: %s\" % str(traceback.format_exc()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlog_message = '断言异常：异常信息: Traceback (most recent call last):\\n  File \"E:\\\\测试工具\\\\CMS接口自动化教程\\\\工程\\\\api_cms20240122\\\\api_cms\\\\common\\\\re...\\common\\\\logger_util.py\", line 66, in error_log\\n    raise Exception(log_message)\\nException: 断言失败:status_code不等于200\\n'\n\n    def error_log(log_message):\n        LoggerUtil().creat_log().info(log_message)\n>       raise Exception(log_message)\nE       Exception: 断言异常：异常信息: Traceback (most recent call last):\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 368, in validate_result\nE           error_log(\"断言失败:\"+assert_key+\"不等于\"+str(assert_value))\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言失败:status_code不等于200\n\ncommon\\logger_util.py:66: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_history.TestCreat object at 0x000002758810FCA0>\ncaseinfo = {'base_url': '${get_base_url(cms_url)}', 'name': '下发A10=100', 'parameters': {'name-value': 'data/HistoryManagement/history_write_cms_io_var3.csv'}, 'request': {'json': {'A10': '100'}}, ...}\n\n    @allure.story(\"接口名称：下发io变量3\")\n    @pytest.mark.parametrize('caseinfo', read_testcase_file('/testcase/7_HistoryManagement/write_cms_io_var3.yml'))\n    def test_write_cms_io_var3(self, caseinfo):\n        allure.dynamic.title(caseinfo['name'])\n        allure.dynamic.description(caseinfo['name'])\n>       RequestUtil().analysis_yaml(caseinfo)\n\ntestcase\\7_HistoryManagement\\test_history.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\requests_util.py:273: in analysis_yaml\n    error_log(\"分析YAML文件异常：异常信息: %s\" % str(traceback.format_exc()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlog_message = '分析YAML文件异常：异常信息: Traceback (most recent call last):\\n  File \"E:\\\\测试工具\\\\CMS接口自动化教程\\\\工程\\\\api_cms20240122\\\\api_cms\\\\comm...ommon\\\\logger_util.py\", line 66, in error_log\\n    raise Exception(log_message)\\nException: 断言失败:status_code不等于200\\n\\n'\n\n    def error_log(log_message):\n        LoggerUtil().creat_log().info(log_message)\n>       raise Exception(log_message)\nE       Exception: 分析YAML文件异常：异常信息: Traceback (most recent call last):\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 368, in validate_result\nE           error_log(\"断言失败:\"+assert_key+\"不等于\"+str(assert_value))\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言失败:status_code不等于200\nE       \nE       During handling of the above exception, another exception occurred:\nE       \nE       Traceback (most recent call last):\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 248, in analysis_yaml\nE           self.validate_result(yq_result, return_data, status_code)\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 448, in validate_result\nE           error_log(\"断言异常：异常信息: %s\" % str(traceback.format_exc()))\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言异常：异常信息: Traceback (most recent call last):\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 368, in validate_result\nE           error_log(\"断言失败:\"+assert_key+\"不等于\"+str(assert_value))\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言失败:status_code不等于200\n\ncommon\\logger_util.py:66: Exception"}, "description": "下发A10=100", "attachments": [{"name": "log", "source": "fa6ff89c-23b9-4d91-99f6-21288b2ab00e-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "caseinfo", "value": "{'name': '下发A10=100', 'base_url': '${get_base_url(cms_url)}', 'parameters': {'name-value': 'data/HistoryManagement/history_write_cms_io_var3.csv'}, 'request': {'url': '/api/v1/variable/setvalues', 'method': 'post', 'json': {'A10': '100'}, 'headers': {'X-Project': '${get_extract_data(x_project)}', 'Authorization': 'Bearer ${get_extract_data(Authorization)}'}}, 'validate': [{'equals': {'status_code': 200}}, {'equals': {'allSuccess': True}}]}"}], "start": 1706685113735, "stop": 1706685113792, "uuid": "57756f45-168d-4dad-9d84-cfe1f2e47c84", "historyId": "cade43f3436a4cd93b5af923b4785e77", "testCaseId": "f490de1c3416468fb5b98656818dd64f", "fullName": "testcase.7_HistoryManagement.test_history.TestCreat#test_write_cms_io_var3", "labels": [{"name": "story", "value": "接口名称：下发io变量3"}, {"name": "feature", "value": "历史管理"}, {"name": "epic", "value": "CMS2.0"}, {"name": "parentSuite", "value": "testcase.7_HistoryManagement"}, {"name": "suite", "value": "test_history"}, {"name": "subSuite", "value": "TestCreat"}, {"name": "host", "value": "DESKTOP-R2L1GT1"}, {"name": "thread", "value": "3040-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.7_HistoryManagement.test_history"}]}