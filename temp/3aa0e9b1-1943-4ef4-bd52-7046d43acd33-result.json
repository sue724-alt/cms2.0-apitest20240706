{"name": "查询数据（归档表-字段触发）", "status": "broken", "statusDetails": {"message": "Exception: 分析YAML文件异常：异常信息: Traceback (most recent call last):\n  File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 381, in validate_result\n    error_log(\"断言失败:\" + assert_key + \"不等于\" + str(assert_value))\n  File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\logger_util.py\", line 66, in error_log\n    raise Exception(log_message)\nException: 断言失败:A1不等于11\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 248, in analysis_yaml\n    self.validate_result(yq_result, return_data, status_code)\n  File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 448, in validate_result\n    error_log(\"断言异常：异常信息: %s\" % str(traceback.format_exc()))\n  File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\logger_util.py\", line 66, in error_log\n    raise Exception(log_message)\nException: 断言异常：异常信息: Traceback (most recent call last):\n  File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 381, in validate_result\n    error_log(\"断言失败:\" + assert_key + \"不等于\" + str(assert_value))\n  File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\logger_util.py\", line 66, in error_log\n    raise Exception(log_message)\nException: 断言失败:A1不等于11", "trace": "self = <common.requests_util.RequestUtil object at 0x0000027589DEBDC0>\nyq_result = [{'equals': {'status_code': 200}}, {'equals': {'A1': 11}}, {'equals': {'B1': 77.456}}, {'equals': {'G1': 1}}, {'equals': {'绝对值B1': 77.456}}, {'equals': {'ROUND1': 77.5}}, ...]\nsj_result = [{'A1': None, 'AND4': None, 'AVERAGE1': None, 'B1': None, ...}, {'A1': None, 'AND4': None, 'AVERAGE1': None, 'B1': Non..., 'AND4': None, 'AVERAGE1': None, 'B1': None, ...}, {'A1': None, 'AND4': None, 'AVERAGE1': None, 'B1': None, ...}, ...]\nstatus_code = 200\n\n    def validate_result(self,yq_result,sj_result,status_code):\n        try:\n            \"\"\"\n            :param yq_result: 预期结果\n            :param sj_result: 实际结果\n            :param status_code: 实际返回的状态码\n            :return:\n            \"\"\"\n            #解析\n            yq_result = self.replace_load(yq_result)\n    \n            yq_result_list = []\n            #断言是否成功的标记：0是成功，其他失败\n            # print('预期结果：',yq_result)\n            # print('实际结果：',sj_result,status_code)\n            flag = 0\n            #解析\n            if yq_result and isinstance(yq_result,list):\n                # print(\"预期结果：\",yq_result)\n                for yq in yq_result:\n                    #断言参数解析\n                    yq = self.replace_load(yq)\n                    for key,value in dict(yq).items():\n                        #等于断言\n                        if key=='equals':\n                            for assert_key,assert_value in dict(value).items():\n                                # print(\"assert_key:\",assert_key,\"assert_value:\",assert_value)\n                                if assert_key==\"status_code\":\n                                    if status_code!=assert_value:\n                                        flag = flag + 1\n                                        error_log(\"断言失败:\"+assert_key+\"不等于\"+str(assert_value))\n                                elif assert_key == \"content\":\n                                    if sj_result != assert_value:\n                                        flag = flag + 1\n                                        error_log(\"断言失败:\" + assert_key + \"不等于\" + str(assert_value))\n                                else:\n                                    #根据key提取所有value\n                                    value_list = jsonpath.jsonpath(sj_result,'$..%s'%assert_key)\n                                    # print(\"实际结果key_list:\",value_list)\n                                    # print(\"预期结果assert_value:\", assert_value)\n                                    if value_list:\n                                        if assert_value not in value_list:\n                                            flag + flag+1\n>                                           error_log(\"断言失败:\" + assert_key + \"不等于\" + str(assert_value))\n\ncommon\\requests_util.py:381: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlog_message = '断言失败:A1不等于11'\n\n    def error_log(log_message):\n        LoggerUtil().creat_log().info(log_message)\n>       raise Exception(log_message)\nE       Exception: 断言失败:A1不等于11\n\ncommon\\logger_util.py:66: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <common.requests_util.RequestUtil object at 0x0000027589DEBDC0>\ncaseinfo = {'base_url': '${get_base_url(cms_url)}', 'name': '查询数据（归档表-字段触发）', 'request': {'json': {'dataSetId': '${get_extract_da..., {'equals': {'B1': 77.456}}, {'equals': {'G1': 1}}, {'equals': {'绝对值B1': 77.456}}, {'equals': {'ROUND1': 77.5}}, ...]}\n\n        def analysis_yaml(self, caseinfo: object) -> object:\n            # print(\"==========caseinfo:\",caseinfo)\n            try:\n                # 1.必须有的四个一级关键字：name,base_url,request,validate\n                caseinfo_keys = dict(caseinfo).keys()\n                if 'name' in caseinfo_keys and 'base_url' in caseinfo_keys and 'request' in caseinfo_keys and 'validate' in caseinfo_keys:\n                    # 2.在request一级关键字下必须包括两个二级关键字：method，url\n                    request_keys = dict(caseinfo['request']).keys()\n                    if 'method' in request_keys and 'url' in request_keys:\n                        # 参数(param,data,json)，请求头，文件上传这些都不能约束\n                        self.base_url = caseinfo['base_url']\n                        name = caseinfo['name']\n                        method = caseinfo['request'].pop('method')\n                        # url = caseinfo['request']['url']\n                        url = caseinfo['request'].pop('url')\n                        headers = None\n                        if jsonpath.jsonpath(caseinfo, '$..headers'):\n                            headers = caseinfo['request']['headers']\n                            del caseinfo['request']['headers']\n    \n                        files = None\n                        if jsonpath.jsonpath(caseinfo, '$..files'):\n                            files = caseinfo['request']['files']\n                            for key,value in dict(files).items():\n                                files_value = self.replace_load(value)\n                                files[key] = open(files_value,'rb')\n                            del caseinfo['request']['files']\n                        res = self.send_request(name =name,method=method,\n                                                url=url,\n                                                headers=headers, files=files,\n                                                **caseinfo['request'])\n    \n    # '----------------------------------------------------------------------------'\n                        status_code = res.status_code\n                        try:\n                            return_data = res.json()  # json提取\n                            return_text = json.dumps(return_data)\n                        except:\n                            self.res_fomat = 1\n    \n                        # 接口关联的变量,既支持正则表达式，也支持json提取\n                        if self.res_fomat == 0:\n                            return_data = res.json()  # json提取\n                            return_text = json.dumps(return_data)\n                            if 'extract' in caseinfo:\n                                for key, value in dict(caseinfo['extract']).items():\n                                    # 正则表达式\n                                    if '(.+?)' in value or '(.*?)' in value:\n                                        ze_value = re.findall(value, return_text)\n                                        if ze_value:\n                                            extract_data = {key: ze_value[1]}\n                                            write_extract_file(extract_data)\n    \n                                    elif value == \"content\":\n                                        if isinstance(return_data,list):\n                                            extract_data = {key: return_data[0]}\n                                            write_extract_file(extract_data)\n                                        elif isinstance(return_data,dict):\n                                            extract_data = {key: return_data}\n                                            write_extract_file(extract_data)\n                                        else:\n                                            extract_data = {key: return_data}\n                                            write_extract_file(extract_data)\n                                    # json、list提取\n                                    else:\n                                        if isinstance(return_data, list):\n                                            value_data = str(value).split('.')\n                                            key_data = value_data[0]\n                                            value_data = int(value_data[1])\n                                            extract_data = {key: return_data[value_data][key_data]}\n                                            write_extract_file(extract_data)\n                                        elif isinstance(return_data, dict):\n                                            if \".\"  in str(value):\n                                                # 仅针对key加索引类型,如：originalId.0\n                                                key_list = str(value).split('.')\n                                                value1 = key_list[0]\n                                                value2 = int(key_list[1])\n                                                value_list = jsonpath.jsonpath(return_data, '$..%s' % value1)\n                                                extract_data = {key: value_list[value2]}\n                                                write_extract_file(extract_data)\n                                            else:\n                                                value_data = jsonpath.jsonpath(return_data, '$..%s' % value)\n                                                # print(\"++++++++++++:\",value_data)\n                                                extract_data = {key: value_data[0]}\n                                                write_extract_file(extract_data)\n    \n    \n                            # 断言封装\n                            yq_result = caseinfo['validate']\n                            # print(\"实际结果：\",return_data)\n>                           self.validate_result(yq_result, return_data, status_code)\n\ncommon\\requests_util.py:248: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\requests_util.py:448: in validate_result\n    error_log(\"断言异常：异常信息: %s\" % str(traceback.format_exc()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlog_message = '断言异常：异常信息: Traceback (most recent call last):\\n  File \"E:\\\\测试工具\\\\CMS接口自动化教程\\\\工程\\\\api_cms20240122\\\\api_cms\\\\common\\\\re...\\\\api_cms\\\\common\\\\logger_util.py\", line 66, in error_log\\n    raise Exception(log_message)\\nException: 断言失败:A1不等于11\\n'\n\n    def error_log(log_message):\n        LoggerUtil().creat_log().info(log_message)\n>       raise Exception(log_message)\nE       Exception: 断言异常：异常信息: Traceback (most recent call last):\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 381, in validate_result\nE           error_log(\"断言失败:\" + assert_key + \"不等于\" + str(assert_value))\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言失败:A1不等于11\n\ncommon\\logger_util.py:66: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_data_run.TestCreat object at 0x0000027587F93B20>\ncaseinfo = {'base_url': '${get_base_url(cms_url)}', 'name': '查询数据（归档表-字段触发）', 'request': {'json': {'dataSetId': '${get_extract_da..., {'equals': {'B1': 77.456}}, {'equals': {'G1': 1}}, {'equals': {'绝对值B1': 77.456}}, {'equals': {'ROUND1': 77.5}}, ...]}\n\n    @allure.story(\"接口名称：查询数据(归档表-字段触发)\")\n    @pytest.mark.parametrize('caseinfo', read_testcase_file(\n        '/testcase/5_DataManagement/query_data(original_table_field_trigger).yml'))\n    def test_query_data_original_table_field_trigger(self, caseinfo):\n        allure.dynamic.title(caseinfo['name'])\n        allure.dynamic.description(caseinfo['name'])\n>       RequestUtil().analysis_yaml(caseinfo)\n\ntestcase\\5_DataManagement\\test_data_run.py:393: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\requests_util.py:273: in analysis_yaml\n    error_log(\"分析YAML文件异常：异常信息: %s\" % str(traceback.format_exc()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlog_message = '分析YAML文件异常：异常信息: Traceback (most recent call last):\\n  File \"E:\\\\测试工具\\\\CMS接口自动化教程\\\\工程\\\\api_cms20240122\\\\api_cms\\\\comm...api_cms\\\\common\\\\logger_util.py\", line 66, in error_log\\n    raise Exception(log_message)\\nException: 断言失败:A1不等于11\\n\\n'\n\n    def error_log(log_message):\n        LoggerUtil().creat_log().info(log_message)\n>       raise Exception(log_message)\nE       Exception: 分析YAML文件异常：异常信息: Traceback (most recent call last):\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 381, in validate_result\nE           error_log(\"断言失败:\" + assert_key + \"不等于\" + str(assert_value))\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言失败:A1不等于11\nE       \nE       During handling of the above exception, another exception occurred:\nE       \nE       Traceback (most recent call last):\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 248, in analysis_yaml\nE           self.validate_result(yq_result, return_data, status_code)\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 448, in validate_result\nE           error_log(\"断言异常：异常信息: %s\" % str(traceback.format_exc()))\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言异常：异常信息: Traceback (most recent call last):\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\requests_util.py\", line 381, in validate_result\nE           error_log(\"断言失败:\" + assert_key + \"不等于\" + str(assert_value))\nE         File \"E:\\测试工具\\CMS接口自动化教程\\工程\\api_cms20240122\\api_cms\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言失败:A1不等于11\n\ncommon\\logger_util.py:66: Exception"}, "description": "查询数据（归档表-字段触发）", "attachments": [{"name": "log", "source": "7d32bd06-4a15-435c-944c-d16502550c4b-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "caseinfo", "value": "{'name': '查询数据（归档表-字段触发）', 'base_url': '${get_base_url(cms_url)}', 'request': {'url': '/api/v1/data/original', 'method': 'post', 'json': {'dataSetId': '${get_extract_data(Original_Table_field_Trigger_ID)}', 'tableName': '归档表_字段触发', 'limit': 500}, 'headers': {'Content-Type': 'application/json;charset=UTF-8', 'X-Project': '${get_extract_data(x_project)}'}}, 'validate': [{'equals': {'status_code': 200}}, {'equals': {'A1': 11}}, {'equals': {'B1': 77.456}}, {'equals': {'G1': 1}}, {'equals': {'绝对值B1': 77.456}}, {'equals': {'ROUND1': 77.5}}, {'equals': {'ROUNDDOWN1': 77.4}}, {'equals': {'ROUNDUP1': 77.5}}, {'equals': {'SUM1': 88.456}}, {'equals': {'AVERAGE1': 44.228}}, {'equals': {'COUNT1': 2}}, {'equals': {'COUNTA1': 2}}, {'equals': {'MAX1': 77.456}}, {'equals': {'MEDIAN1': 44.228}}, {'equals': {'MIN1': 11}}, {'equals': {'CHAR2': '\\\\'}}, {'equals': {'CONCATENATE2': 'Abcf123'}}, {'equals': {'LEFT2': 'Ab'}}, {'equals': {'LEN2': '4'}}, {'equals': {'LOWER2': 'abcf'}}, {'equals': {'UPPER2': 'ABCF'}}, {'equals': {'MID2': 'Ab'}}, {'equals': {'REPLACE2': '替换cf'}}, {'equals': {'RIGHT2': 'cf'}}, {'equals': {'TEXT月日': '10月20日'}}, {'equals': {'TODATE2': '2023-06-19 00:00:00'}}, {'equals': {'TRIM2': 'Abcf'}}, {'equals': {'DATE3': '2023-06-19 00:00:00'}}, {'equals': {'差值3年': 3}}, {'equals': {'差值5月': 5}}, {'equals': {'差值177日': 177}}, {'equals': {'差值4249时': 4249}}, {'equals': {'差值254955分': 254955}}, {'equals': {'差值15297325秒': 15297325}}, {'equals': {'DAYS18天': '18'}}, {'equals': {'AND4': 'False'}}, {'equals': {'FALSE4': 'False'}}, {'equals': {'TRUE4': 'True'}}, {'equals': {'IF4': '及格'}}, {'equals': {'NOT_true4': 'False'}}, {'equals': {'NOT_false4': 'True'}}, {'equals': {'OR4': 'False'}}, {'equals': {'Change4': 0}}, {'greater_than': {'随机数0_1': 0}}, {'greater_than': {'随机数1_100': 0}}, {'length_greater_than': {'NOW3': 0}}, {'length_greater_than': {'YEAR3': 0}}, {'length_greater_than': {'MONTH3': 0}}, {'length_greater_than': {'DAY3': 0}}, {'length_greater_than': {'HOUR3': 0}}, {'length_greater_than': {'MINUTE3': 0}}, {'length_greater_than': {'SECOND3': 0}}, {'length_greater_than': {'TODAY3': 0}}, {'length_greater_than': {'WEEKDAY3': 0}}, {'length_greater_than': {'WEEKNUM3': 0}}, {'length_greater_than': {'班次': 0}}]}"}], "start": 1706685078255, "stop": 1706685078386, "uuid": "0db3b257-be0b-4f7d-b256-73517bb7ba07", "historyId": "87cf670cf7f2b2987b6256004e219e30", "testCaseId": "175fd7c3f2147b2c3dbfc6496adc4b1b", "fullName": "testcase.5_DataManagement.test_data_run.TestCreat#test_query_data_original_table_field_trigger", "labels": [{"name": "feature", "value": "数据管理"}, {"name": "story", "value": "接口名称：查询数据(归档表-字段触发)"}, {"name": "epic", "value": "CMS2.0"}, {"name": "parentSuite", "value": "testcase.5_DataManagement"}, {"name": "suite", "value": "test_data_run"}, {"name": "subSuite", "value": "TestCreat"}, {"name": "host", "value": "DESKTOP-R2L1GT1"}, {"name": "thread", "value": "3040-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.5_DataManagement.test_data_run"}]}